% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ped_internal.R
\name{ped_internal}
\alias{ped_internal}
\alias{reorderPed}
\alias{parentsBeforeChildren}
\alias{hasParentsBeforeChildren}
\alias{foundersFirst}
\alias{internalID}
\title{Internal ordering of pedigree members}
\usage{
reorderPed(x, neworder = NULL, internal = FALSE)

parentsBeforeChildren(x)

hasParentsBeforeChildren(x)

foundersFirst(x)

internalID(x, ids, errorIfUnknown = TRUE)
}
\arguments{
\item{x}{A \code{ped} object. Most of these functions also accepts ped lists.}

\item{neworder}{A permutation of \code{labels(x)} (or a subset of this),
indicating the new internal ordering. If \code{internal = TRUE}, \code{neworder}
refers to the internal ordering, so must be numeric. \code{1:pedsize(x)}. By
default, the natural order of the ID labels is used.}

\item{internal}{A logical (default: FALSE). If TRUE, \code{neworder} is
interpreted as referring to the internal ordering.}

\item{ids}{A character vector (or coercible to one) of original ID labels.}

\item{errorIfUnknown}{A logical. If TRUE (default), the function stops with
an error if not all elements of \code{ids} are recognised as names of members in
\code{x}.}
}
\description{
These functions give access to - and enable modifications of - the order in
which the members of a pedigree are stored. (This is the order in which the
members are listed when a \code{ped} object is printed to the screen.)
}
\details{
The internal ordering is usually of little importance for end users, with one
important exception: Certain pedigree-traversing algorithms require parents
to precede their children. A special function, \code{parentsBeforeChildren()} is
provided for this purpose. This is a wrapper of the more general
\code{reorderPed()} which allows any permutation of the members.

It should be noted that \code{\link[=ped]{ped()}} by default calls \code{parentsBeforeChildren()}
whenever a pedigree is created, unless explicitly avoided with \code{reorder = FALSE}.

\code{hasParentsBeforeChildren()} can be used as a quick test to decide if it is
necessary to call \code{parentsBeforeChildren()}.

The \code{foundersFirst()} function reorders the pedigree so that all the founders
come first.

The utility \code{internalID()} converts ID labels to indices in the internal
ordering. If \code{x} is a list of pedigrees, the output is a data frame
containing both the component number and internal ID (within the component).
}
\examples{
x = ped(id = 3:1, fid = c(1,0,0), mid = c(2,0,0), sex = c(1,2,1), reorder = FALSE)
x

# The 'ids' argument is converted to character, hence these are the same:
internalID(x, ids = 3)
internalID(x, ids = "3")

hasParentsBeforeChildren(x)

# Put parents first
parentsBeforeChildren(x)

# Typical use of reorderPed: Swap sibling plot order
y = nuclearPed(2) |> reorderPed(4:3)
plot(y)


### If labels are numeric, argument `internal` is important
z = singleton(1) |> addParents(1)
z
reorderPed(z, 1:3, internal = FALSE) # ID order = "1","2","3"
reorderPed(z, 1:3, internal = TRUE)  # index order: 1,2,3 (i.e., no change)

}
\seealso{
\code{\link[=ped]{ped()}}
}
