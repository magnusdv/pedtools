% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marker_properties.R
\name{marker_prop}
\alias{marker_prop}
\alias{emptyMarker}
\alias{emptyMarker.marker}
\alias{emptyMarker.ped}
\alias{emptyMarker.list}
\alias{allowsMutations}
\alias{allowsMutations.marker}
\alias{allowsMutations.ped}
\alias{allowsMutations.list}
\alias{nAlleles}
\alias{nAlleles.marker}
\alias{nAlleles.ped}
\alias{nAlleles.list}
\alias{isXmarker}
\alias{isXmarker.marker}
\alias{isXmarker.ped}
\alias{isXmarker.list}
\title{Marker properties}
\usage{
emptyMarker(x, ...)

\method{emptyMarker}{marker}(x, ...)

\method{emptyMarker}{ped}(x, markers = seq_len(nMarkers(x)), ...)

\method{emptyMarker}{list}(x, markers = seq_len(nMarkers(x)), ...)

allowsMutations(x, ...)

\method{allowsMutations}{marker}(x, ...)

\method{allowsMutations}{ped}(x, markers = seq_len(nMarkers(x)), ...)

\method{allowsMutations}{list}(x, markers = seq_len(nMarkers(x)), ...)

nAlleles(x, ...)

\method{nAlleles}{marker}(x, ...)

\method{nAlleles}{ped}(x, markers = seq_len(nMarkers(x)), ...)

\method{nAlleles}{list}(x, markers = seq_len(nMarkers(x)), ...)

isXmarker(x, ...)

\method{isXmarker}{marker}(x, ...)

\method{isXmarker}{ped}(x, markers = seq_len(nMarkers(x)), ...)

\method{isXmarker}{list}(x, markers = seq_len(nMarkers(x)), ...)
}
\arguments{
\item{x}{A single \code{marker} object or a \code{ped} object (or a list of such)}

\item{...}{Not used.}

\item{markers}{A vector of names of indices of markers attached to \code{x}, in
the case that \code{x} is a \code{ped} object or a list of such. By default all
attached markers are selected.}
}
\value{
If \code{x} is a single \code{marker} object, the output is a vector of length
1.

Alternatively, if \code{x} is a \code{ped} object, or a list of such, the output is a
vector of the same length as \code{markers} (which includes all attached markers
by default), reporting the property of each marker.
}
\description{
These functions are used to retrieve various properties of marker objects.
Each function accepts as input either a single \code{marker} object, a \code{ped}
object, or a list of \code{ped} objects.
}
\details{
\code{emptyMarker()} returns TRUE for markers with no genotypes.

\code{allowsMutations} returns TRUE for markers whose \code{mutmod} attribute is
non-NULL and differs from the identity matrix.

\code{nAlleles()} returns the number of alleles of each marker.
}
\examples{
cmp1 = nuclearPed(1)
cmp2 = singleton(10)
loc = list(alleles = 1:2)
x = setMarkers(list(cmp1, cmp2), locus = rep(list(loc), 3))

# Check that all markers has 2 alleles
stopifnot(identical(nAlleles(x), c(2L,2L,2L)))

# Indiv 1 is genotyped for the first marker
genotype(x[[1]], 1, 1) = 1:2

# Check that markers 2 and 3 are empty
stopifnot(identical(emptyMarker(x), c(FALSE,TRUE,TRUE)),
          identical(emptyMarker(x[[1]]), c(FALSE,TRUE,TRUE)),
          identical(emptyMarker(x[[2]]), c(TRUE,TRUE,TRUE)),
          identical(emptyMarker(x, markers = c(3,1)), c(TRUE,FALSE))
          )

# Marker 2 allows mutations
mutmod(x, 2) = list("prop", rate = 0.1)
stopifnot(identical(allowsMutations(x), c(FALSE,TRUE,FALSE)),
          identical(allowsMutations(x, markers = 2:3), c(TRUE,FALSE))

# Make marker 3 X-linked
chrom(x[[1]], 3) = "X"
chrom(x[[2]], 3) = "X"
stopifnot(identical(isXmarker(x), c(FALSE,FALSE,TRUE)))
}
